<?php

/* 
Los patrones de diseรฑo son soluciones de arquitectura de software aplicables a diferentes problemas.
existen 3 tipos de patrones:

Creaciรณn โ Se encargan de cรณmo crear nuevas instancias de nuestro objetos.
Estructurales โ Nos dicen cรณmo debemos estructurar nuestras clases.
Comportamiento โ Nos dicen cรณmo deben comportase nuestros objetos.
----------------------------------------------------------------------------------------

Singleton
Este patrรณn se puede pensar como un patrรณn de creaciรณn o de comportamiento. La idea consiste en tener un clase que tenga una sola instancia en nuestra aplicaciรณn. Usualmente este patrรณn se utiliza para optimizar recursos.

Este se encarga de evitar a toda costa de exista mรกs de una instancia. Para conseguir esto en la clase tenemos una propiedad $thInstance de tipo static, posteriormente debemos crear como private el constructor. Para instanciar esta clase, crearemos una funciรณn static que normalmente se llamarรก getInstance y estรก se encargarรก de comprobar si ya existe una instancia, si no existe una, la funciรณn la crearรก.

----------------------------------------------------------------------------------------

Factory

Se trata de un patrรณn creacional, o sea, que nos ayuda a crear nuevas instancias de objetos.

El patrรณn factory consiste en utilizar una clase constructora abstracta con unos cuantos mรฉtodos definidos y otro(s) abstracto(s).

El patrรณn factory plantea simplificar una instancia, y eso lo podemos hacer por medio de otra clase que se encargue de obtener la instancia haciendo los procesos complejos requeridos, asรญ ante cualquier cambio solo modificamos esa clase factory y no nos preocupamos por modificar cada una de las instancias.

----------------------------------------------------------------------------------------

Command

Se trata de un patrรณn de comportamiento, y este se utiliza cuando existe alguna operaciรณn especialmente compleja que debe ser realizada desde diferentes puntos de entrada.

ยฟQuรฉ es una interfaz y quรฉ son las clases abstractas?
La siguiente explicaciรณn menciona a Java pero se puede aplicar a muchos lenguajes de programaciรณn las misma definiciones:

๐

Las clases abstractas cuando tienen mรฉtodos define lo que tienen quรฉ hacer pero no cรณmo se debe de hacer. Estas clases pueden ser heredadas por X clases que necesitemos pero no pueden ser instanciadas.

En Java no se puede heredar de mรกs de una clase, para esto utilizamos las interfaces. Aquรญ igual se especifica quรฉ se debe de hacer pero no el cรณmo.

A diferencia de una clase abstracta una interfaz no puede hacer nada por si sola, o sea, que las clases hijas estรกn encargadas de definir el comportamiento de todos los mรฉtodos abstractos de forma obligatoria.

En otra palabras, las interfaces serรกn contratos que indicarรกn que es lo que se debe de hacer sin proveer ninguna funcionalidad.




*/